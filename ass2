
CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY,
    customer_name TEXT,
    email TEXT,
    phone TEXT,
    address TEXT
);


CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    order_date DATE,
    total_amount NUMERIC,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);


CREATE TABLE order_items (
    order_item_id INTEGER PRIMARY KEY,
    order_id INTEGER,
    product_id INTEGER,
    quantity INTEGER,
    unit_price NUMERIC,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Create products table
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT,
    category_id INTEGER,
    description TEXT,
    FOREIGN KEY (category_id) REFERENCES categories(category_id)
);


CREATE TABLE categories (
    category_id INTEGER PRIMARY KEY,
    category_name TEXT
);


INSERT INTO customers (customer_id, customer_name, email, phone, address) VALUES
(1, 'John Doe', 'johndoe@example.com', '123-456-7890', '123 Main St'),
(2, 'Jane Smith', 'janesmith@example.com', '555-234-5678', '456 Oak Ave'),
(3, 'Alice Johnson', 'alicej@example.com', '555-876-1234', '789 Elm St'),
(4, 'Bob Brown', 'bobbrown@example.com', '555-345-6789', '234 Maple Rd'),
(5, 'Charlie Black', 'cblack@example.com', '555-987-6543', '567 Pine St'),
(6, 'Emily White', 'emwhite@example.com', '555-432-5678', '890 Birch St'),
(7, 'David Green', 'dgreen@example.com', '555-345-1234', '345 Cedar St'),
(8, 'Olivia Blue', 'oblue@example.com', '555-765-4321', '678 Willow St'),
(9, 'Liam Grey', 'lgrey@example.com', '555-321-8765', '901 Ash St'),
(10, 'Sophia Silver', 'ssilver@example.com', '555-654-9876', '234 Cherry Ln');


INSERT INTO categories (category_id, category_name) VALUES
(1, 'Electronics'),
(2, 'Clothing'),
(3, 'Books'),
(4, 'Home Goods'),
(5, 'Toys'),
(6, 'Groceries'),
(7, 'Beauty Products'),
(8, 'Sporting Goods'),
(9, 'Automotive'),
(10, 'Furniture');


INSERT INTO products (product_id, product_name, category_id, description) VALUES
(1, 'Smartphone', 1, 'Latest model smartphone with advanced features'),
(2, 'Jeans', 2, 'Comfortable denim jeans'),
(3, 'Mystery Novel', 3, 'Best-selling mystery novel by popular author'),
(4, 'Sofa', 10, 'Comfortable three-seater sofa'),
(5, 'Running Shoes', 8, 'Lightweight running shoes for athletes'),
(6, 'Coffee Maker', 4, 'Automatic coffee maker with programmable settings'),
(7, 'Toy Car', 5, 'Remote-controlled toy car'),
(8, 'Shampoo', 7, 'Organic shampoo for all hair types'),
(9, 'Basketball', 8, 'Professional-grade basketball'),
(10, 'Car Battery', 9, 'Long-lasting car battery with high performance');


INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 1, '2024-10-01', 199.99),
(2, 2, '2024-10-02', 49.99),
(3, 3, '2024-10-03', 14.99),
(4, 4, '2024-10-04', 899.99),
(5, 5, '2024-10-05', 129.99),
(6, 6, '2024-10-06', 79.99),
(7, 7, '2024-10-07', 39.99),
(8, 8, '2024-10-08', 299.99),
(9, 9, '2024-10-09', 199.99),
(10, 10, '2024-10-10', 59.99);


INSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price) VALUES
(1, 1, 1, 1, 199.99),  -- Smartphone
(2, 2, 2, 1, 49.99),   -- Jeans
(3, 3, 3, 1, 14.99),   -- Mystery Novel
(4, 4, 4, 1, 899.99),  -- Sofa
(5, 5, 5, 1, 129.99),  -- Running Shoes
(6, 6, 6, 1, 79.99),   -- Coffee Maker
(7, 7, 7, 1, 39.99),   -- Toy Car
(8, 8, 8, 1, 299.99),  -- Shampoo
(9, 9, 9, 1, 199.99),  -- Basketball
(10, 10, 10, 1, 59.99); -- Car Battery


WITH order_summary AS (
    SELECT
        o.order_id,
        c.customer_name,
        o.order_date,
        o.total_amount,
        SUM(oi.quantity) AS total_quantity
    FROM
        orders o
    JOIN customers c ON o.customer_id = c.customer_id
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY
        o.order_id,
        c.customer_name,
        o.order_date,
        o.total_amount
)
SELECT * FROM order_summary;



WITH product_sales AS (
    SELECT
        p.product_id,
        p.product_name,
        c.category_name AS category,
        SUM(oi.quantity * oi.unit_price) AS total_revenue
    FROM
        products p
    JOIN categories c ON p.category_id = c.category_id
    JOIN order_items oi ON p.product_id = oi.product_id
    GROUP BY
        p.product_id,
        p.product_name,
        c.category_name
)
SELECT * FROM product_sales;



1. The customer who has made the most orders:

SELECT 
    c.customer_id,
    c.customer_name,
    COUNT(o.order_id) AS total_orders
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, c.customer_name
ORDER BY 
    total_orders DESC
LIMIT 1;



1. The customer who has made the most orders:

sql
Копировать код
SELECT 
    c.customer_id,
    c.customer_name,
    COUNT(o.order_id) AS total_orders
FROM 
    customers c
JOIN 
    orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, c.customer_name
ORDER BY 
    total_orders DESC
LIMIT 1;

2. The product that has been ordered the most in terms of quantity:

SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold
FROM 
    products p
JOIN 
    order_items oi ON p.product_id = oi.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_quantity_sold DESC
LIMIT 1;

3. The product that has generated the most revenue:

SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM 
    products p
JOIN 
    order_items oi ON p.product_id = oi.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_revenue DESC
LIMIT 1;


4. The total revenue generated by the customer with the most orders:
WITH customer_order_count AS (
    SELECT 
        c.customer_id,
        c.customer_name,
        COUNT(o.order_id) AS total_orders
    FROM 
        customers c
    JOIN 
        orders o ON c.customer_id = o.customer_id
    GROUP BY 
        c.customer_id, c.customer_name
    ORDER BY 
        total_orders DESC
    LIMIT 1
)
SELECT 
    c.customer_id,
    c.customer_name,
    SUM(o.total_amount) AS total_revenue_generated
FROM 
    customer_order_count c
JOIN 
    orders o ON c.customer_id = o.customer_id;


